# predictedw <- sim(map2, data = list(weight_c = weightc_seq), n = 5e3)  # Rcode 4.59
# hpdi_prediction <- apply(predictedw, 2, HPDI, prob = 0.89)  # CF. Rcode 4.60
# shade(hpdi_prediction, weightc_seq, col = rgb(0, 0.4, 0, 0.2))  # Cf. Rcode 4.61
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '')
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
# # Credibility interval (HPDI 89 %) around expected values
# weightc_seq <- seq(-30, 30, by = 0.01)  # Cf. Rcode 4.54
# mu <- link(map2, data = list(weight_c = weightc_seq), n = 1e3)  # Cf. Rcode 4.54
# mu_hpdi89 <- apply(mu, 2, HPDI, prob = 0.89)  # Cf. Rcode 4.56
# shade(mu_hpdi89, weightc_seq, col = rgb(0, 1, 0, 0.2))  # Cf. Rcode 4.57
#
# # Prediction interval
# predictedw <- sim(map2, data = list(weight_c = weightc_seq), n = 5e3)  # Rcode 4.59
# hpdi_prediction <- apply(predictedw, 2, HPDI, prob = 0.89)  # CF. Rcode 4.60
# shade(hpdi_prediction, weightc_seq, col = rgb(0, 0.4, 0, 0.2))  # Cf. Rcode 4.61
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '')
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20), labels = seq(-20, 20) + mean(d2$weight))
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', xlab = '')
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20), labels = seq(-20, 20) + mean(d2$weight))
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', xlab = '')
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20), labels = seq(-20, 20) + round(mean(d2$weight)))
seq(-20, 20) + round(mean(d2$weight))
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', xlab = '')
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', xlab = '')
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axis = FALSE)
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axes = FALSE)
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axes = FALSE)
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
axis(2)
knitr::opts_chunk$set(echo = TRUE)
library(rethinking)
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axes = FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(rethinking)
set.seed(123)
mu <- rnorm(1e4, mean = 0, sd = 10)
sigma <- runif(1e4, min = 0, max = 10)
heights <- rnorm(1e4, mu, sigma)
summary(heights)
sd(heights)
hist(heights, breaks = seq(-57, 51, by = 2))
model <- alist(y ~ dnorm(mu, sigma),
mu ~ dnorm(0, 10),
sigma ~ dunif(0, 10))
flist <- alist(
y ~ dnorm(mu, sigma),
mu <- a * bx,
a ~ dnorm(0, 50),
b ~ dunif(0, 10),
sigma ~ dunif(0, 50)
)
data(Howell1)
d <- Howell1
rm(Howell1)
head(d)
d2 <- d[d$age >= 18, ]
d2$weight_c <- d2$weight - mean(d2$weight)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0 + bw * weight_c,
b0 ~ dnorm(150, 50),
bw ~ dunif(0, 30),
sigma ~ dunif(0, 50))
map1 <- map(model, data = d2)
precis(map1)
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axes = FALSE)
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
# Prediction interval
weightc_seq <- seq(-20, 20, by = 1)
predictedw <- sim(map1, data = list(weight_c = weightc_seq), n = 5e3)  # Rcode 4.59
hpdi_prediction <- apply(predictedw, 2, HPDI, prob = 0.89)  # CF. Rcode 4.60
shade(hpdi_prediction, weightc_seq, col = rgb(0, 0.4, 0, 0.2))  # Cf. Rcode 4.61
# Add axis and uncenter x-axis
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
axis(2)
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axes = FALSE)
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
# Prediction interval
weightc <- seq(-25, 25, by = 1)
predictedw <- sim(map1, data = list(weight_c = weightc), n = 5e3)  # Rcode 4.59
hpdi_prediction <- apply(predictedw, 2, HPDI, prob = 0.89)  # CF. Rcode 4.60
shade(hpdi_prediction, weightc_seq, col = rgb(0, 0.4, 0, 0.2))  # Cf. Rcode 4.61
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axes = FALSE)
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
# Prediction interval
weightc <- seq(-25, 25, by = 1)
predictedw <- sim(map1, data = list(weight_c = weightc), n = 5e3)  # Rcode 4.59
hpdi_prediction <- apply(predictedw, 2, HPDI, prob = 0.89)  # CF. Rcode 4.60
shade(hpdi_prediction, weightc, col = rgb(0, 0.4, 0, 0.2))  # Cf. Rcode 4.61
# Add axis and uncenter x-axis
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
axis(2)
# Plot data and MAP regression line
plot(d2$weight_c, d2$height, pch = '', axes = FALSE)
points(d2$weight_c, d2$height, pch = 21, bg = rgb(0, 1, 0, 0.1))
abline(coef(map1)['b0'], coef(map1)['bw'])
# Prediction interval
weightc <- seq(-25, 25, by = 1)
predictedw <- sim(map1, data = list(weight_c = weightc), n = 5e3)  # Rcode 4.59
hpdi_prediction <- apply(predictedw, 2, HPDI, prob = 0.89)  # CF. Rcode 4.60
shade(hpdi_prediction, weightc, col = rgb(0, 0.4, 0, 0.2))  # Cf. Rcode 4.61
# Add axis and uncenter x-axis
axis(1, at = seq(-20, 20, by = 5), labels = seq(-20, 20, by = 5) + round(mean(d2$weight)))
axis(2)
knitr::opts_chunk$set(echo = TRUE)
library(rethinking)
n1 = 150 # Number of smokers
s1 = 95  # Smokers with prominent wrinkles
n2 = 250 # Number of non-smokers
s2 = 105 # Non-smokers prominent wrinkles
risk_smoke <- s1/n1
risk_nonsmoke <- s2/n2
riskdiff <- risk_smoke - risk_nonsmoke
rr <- risk_smoke / risk_nonsmoke
or <- (risk_smoke / (1 - risk_smoke)) / (risk_nonsmoke / (1-risk_nonsmoke))
outcome <- c(risk_smoke = risk_smoke, risk_nonsmoke = risk_nonsmoke,
riskdiff = riskdiff, rr = rr, or = or)
round(outcome, 2)
# 2D-grid using expand.grid()
p <- seq(0.001, 0.999, by = 0.001)
grid <- expand.grid(p1 = p, p2 = p)
# Log likelihood
grid$loglike <- dbinom(s1, n1, prob = grid$p1, log = TRUE) +
dbinom(s2, n2, prob = grid$p2, log = TRUE)
# Likelihood (standardized to max = 1)
grid$likelihood <- exp(grid$loglike) / exp(max(grid$loglike))
# Plot likelihood
rethinking::contour_xyz(grid$p1, grid$p2, grid$likelihood,
xlim = c(0.5, 0.8), ylim = c(0.3, 0.6),
main = "Likelihood", xlab = "p smokers", ylab = "p non-smokers")
# Flat prior
grid$prior <- rep(1, length(nrow(grid)))
# Posterior, standardized ala McElreath
grid$posterior <- (grid$prior * grid$likelihood) / sum(grid$likelihood)
# Risk difference for each pair of parameters in the grid
grid$pdiff <- grid$p1 - grid$p2
# Relative risk for each pair of parameters in the grid
grid$rr <- grid$p1 / grid$p2
# Odds ratio for each pair of parameters in the grid
grid$or <- (grid$p1/(1 -grid$p1)) / (grid$p2/(1 -grid$p2))
# Sampling from the posterior
samples_diff <- sample(grid$pdiff, size = 1e5, prob = grid$posterior, replace = TRUE)
samples_rr <- sample(grid$rr, size = 1e5, prob = grid$posterior, replace = TRUE)
samples_or <- sample(grid$or, size = 1e5, prob = grid$posterior, replace = TRUE)
# Plot distributions
par(mfrow = c(1, 3))
dens(samples_diff, main = "Risk difference")
dens(samples_rr, main = "Relative risk")
dens(samples_or, main = "Odds ratio")
# Summarize
summarize <- function(samples) {
ci95 <- quantile(samples, prob = c(0.025, 0.975))
mode <- chainmode(samples)
m <- mean(samples)
mdn <- median(samples)
out <- round(c(mode = mode, mean = m, mdn = mdn, ci = ci95), 2)
out
}
# Summary from posterior
round(outcome, 2)[3] # Observed (from above)
summarize(samples_diff)
round(outcome, 2)[4] # Observed (from above)
summarize(samples_rr)
round(outcome, 2)[5] # Observed (from above)
summarize(samples_or)
# Create data
smokers <- c(rep(0, 250), rep(1, 150))
wrinkles <- c(rep(0, 145), rep(1, 105), rep(0, 55), rep(1, 95))
d <- data.frame(smokers, wrinkles)
model <- alist(wrinkles <- dbinom(1, p),
p <- alpha * (1 - smokers) + beta * smokers,
alpha ~ dunif(0, 1),
beta ~ dunif(0, 1))
mapout <- map(model, data = d)
precis(mapout)
post <- extract.samples(mapout, 1e5)
# Posterior for risk difference
post$riskdiff <- post$beta - post$alpha
dens(post$riskdiff)
summarize(post$riskdiff)
data(Howell1)
d <- Howell1
rm(Howell1)
d2 <- d[d$age >= 18, ]
hist(d2$height, breaks = seq(129, 191, by = 2), ylab = '', yaxt = 'n', prob = TRUE,
xlab = sprintf('Height (N = %.0f)', length(d2$height)), main = '')
z <- density(d2$height)
polygon(z, col = rgb(0, 1, 1, 0.1))
round(c(mean = mean(d2$height), sd = sd(d2$height)),2)
tout <- t.test(d2$height)
tout
lm_interc <- lm(d2$height ~ 1)
summary(lm_interc)
confint(lm_interc)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0,
b0 ~ dnorm(178, 20),
sigma ~ dunif(0, 50))
map_interc <- map(model, data = d2, start = list(b0 = 160, sigma = 10))
precis(map_interc, prob = 0.95)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0)
map_interc <- map(model, data = d2, start = list(b0 = 160, sigma = 10))
precis(map_interc, prob = 0.95)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0)
map_interc <- map(model, data = d2)
knitr::opts_chunk$set(echo = TRUE)
library(rethinking)
n1 = 150 # Number of smokers
s1 = 95  # Smokers with prominent wrinkles
n2 = 250 # Number of non-smokers
s2 = 105 # Non-smokers prominent wrinkles
risk_smoke <- s1/n1
risk_nonsmoke <- s2/n2
riskdiff <- risk_smoke - risk_nonsmoke
rr <- risk_smoke / risk_nonsmoke
or <- (risk_smoke / (1 - risk_smoke)) / (risk_nonsmoke / (1-risk_nonsmoke))
outcome <- c(risk_smoke = risk_smoke, risk_nonsmoke = risk_nonsmoke,
riskdiff = riskdiff, rr = rr, or = or)
round(outcome, 2)
# 2D-grid using expand.grid()
p <- seq(0.001, 0.999, by = 0.001)
grid <- expand.grid(p1 = p, p2 = p)
# Log likelihood
grid$loglike <- dbinom(s1, n1, prob = grid$p1, log = TRUE) +
dbinom(s2, n2, prob = grid$p2, log = TRUE)
# Likelihood (standardized to max = 1)
grid$likelihood <- exp(grid$loglike) / exp(max(grid$loglike))
# Plot likelihood
rethinking::contour_xyz(grid$p1, grid$p2, grid$likelihood,
xlim = c(0.5, 0.8), ylim = c(0.3, 0.6),
main = "Likelihood", xlab = "p smokers", ylab = "p non-smokers")
# Flat prior
grid$prior <- rep(1, length(nrow(grid)))
# Posterior, standardized ala McElreath
grid$posterior <- (grid$prior * grid$likelihood) / sum(grid$likelihood)
# Risk difference for each pair of parameters in the grid
grid$pdiff <- grid$p1 - grid$p2
# Relative risk for each pair of parameters in the grid
grid$rr <- grid$p1 / grid$p2
# Odds ratio for each pair of parameters in the grid
grid$or <- (grid$p1/(1 -grid$p1)) / (grid$p2/(1 -grid$p2))
# Sampling from the posterior
samples_diff <- sample(grid$pdiff, size = 1e5, prob = grid$posterior, replace = TRUE)
samples_rr <- sample(grid$rr, size = 1e5, prob = grid$posterior, replace = TRUE)
samples_or <- sample(grid$or, size = 1e5, prob = grid$posterior, replace = TRUE)
# Plot distributions
par(mfrow = c(1, 3))
dens(samples_diff, main = "Risk difference")
dens(samples_rr, main = "Relative risk")
dens(samples_or, main = "Odds ratio")
# Summarize
summarize <- function(samples) {
ci95 <- quantile(samples, prob = c(0.025, 0.975))
mode <- chainmode(samples)
m <- mean(samples)
mdn <- median(samples)
out <- round(c(mode = mode, mean = m, mdn = mdn, ci = ci95), 2)
out
}
# Summary from posterior
round(outcome, 2)[3] # Observed (from above)
summarize(samples_diff)
round(outcome, 2)[4] # Observed (from above)
summarize(samples_rr)
round(outcome, 2)[5] # Observed (from above)
summarize(samples_or)
# Create data
smokers <- c(rep(0, 250), rep(1, 150))
wrinkles <- c(rep(0, 145), rep(1, 105), rep(0, 55), rep(1, 95))
d <- data.frame(smokers, wrinkles)
model <- alist(wrinkles <- dbinom(1, p),
p <- alpha * (1 - smokers) + beta * smokers,
alpha ~ dunif(0, 1),
beta ~ dunif(0, 1))
mapout <- map(model, data = d)
precis(mapout)
post <- extract.samples(mapout, 1e5)
# Posterior for risk difference
post$riskdiff <- post$beta - post$alpha
dens(post$riskdiff)
summarize(post$riskdiff)
data(Howell1)
d <- Howell1
rm(Howell1)
d2 <- d[d$age >= 18, ]
hist(d2$height, breaks = seq(129, 191, by = 2), ylab = '', yaxt = 'n', prob = TRUE,
xlab = sprintf('Height (N = %.0f)', length(d2$height)), main = '')
z <- density(d2$height)
polygon(z, col = rgb(0, 1, 1, 0.1))
round(c(mean = mean(d2$height), sd = sd(d2$height)),2)
tout <- t.test(d2$height)
tout
lm_interc <- lm(d2$height ~ 1)
summary(lm_interc)
confint(lm_interc)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0)
map_interc <- map(model, data = d2)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0)
map_interc <- map(model, data = d2, start = list(b0 = 160, sigma = 10))
precis(map_interc, prob = 0.95)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0)
map_interc <- map(model, data = d2, start = list(b0 = 160, sigma = 10))
precis(map_interc, prob = 0.95)
model <- alist(height ~ dnorm(mu, sigma),
mu <- b0,
b0 ~ dnorm(178, 20),
sigma ~ dunif(0, 50))
map_interc <- map(model, data = d2)
precis(map_interc, prob = 0.95)
knitr::opts_chunk$set(echo = TRUE)
library(rethinking)
## File names
# Windows
# file_rove = "C:/Users/MATNI/Documents/mn2018/ALEXIS/experiments/108/rawdata/results_alexis108_extraexp_rove4ms.txt"
# Linux
file_rove = "/home/matni/Desktop/a108/rawdata/results_alexis108_extraexp_rove4ms.txt"
## Rove -------------------------------------------------------------------------
d <- read.table(file_rove, sep = ",", header = TRUE)
# Fix variable: ild never > 10, although the staircase did not know!
d$ratio_bounded <- 10 * (d$ratio > 10) + d$ratio * (d$ratio <= 10)
# Fix ratio for new ILD defintion +5 for [+5, -5 dB] definition
d$ratio_bounded <- d$ratio_bounded + 5 * (d$ilddef == 1)
# Correct answer
d$pc <- 1 * (d$correct == d$answer)
# Frequencies per id and 2x2 condition
table(d$rove, d$ilddef, d$id)
# Rove standard deviation
rovesd <- aggregate(list(rovesd = d$srove), list(ild = d$ild, ilddef = d$ilddef, itd = d$itd, rove = d$rove), sd)
rovesd$rovesd
# Rove range
roverange <- aggregate(list(roverange = d$srove), list(ild = d$ild, itd = d$itd, rove = d$rove),
function(x) max(x) - min(x))
roverange$roverange
stan_th <- function(id, ilddef, rove, chains = 1, iter = 1e4, warmup = iter/2) {
g <- d[d$id == id & d$ilddef == ilddef & d$rove == rove, ]
y <- as.integer(g$pc)
x <- g$ratio_bounded
N <- as.integer(length(y))
model <- stan("psychometric_function_revised.stan", data = list(N = N, x = x, y = y),
chains = chains, iter = iter, warmup = warmup)
print(model)
draws <- extract(model)
th <- as.vector(draws$m)
thhdi <- HPDI(th, prob = 0.95)
lapse <- as.vector(draws$lambda)
out <- c(id = id, ilddef = ilddef, rove = rove, th = chainmode(th),
hdi95lo = thhdi[1], hdi95hi = thhdi[2] , lapse = chainmode(lapse))
out
}
cond <- expand.grid(id = c(107, 901), ilddef = c(0, 1), rove = c(0, 10))
rovestan <- data.frame(t(sapply(1:nrow(cond), function(i) {stan_th(cond[i,1], cond[i,2], cond[i,3])})))
rovestan
rovestan <- rovestan[order(rovestan$id),]
rovestan
# get some data
g <- d[d$id == 107 & d$ilddef == 1 & d$rove == 0, ]
y <- as.integer(g$pc)
x <- g$ratio_bounded
N <- as.integer(length(y))
# Run stan
fit <- stan("psychometric_function_revised.stan", data = list(N = N, x = x, y = y),
chains = 1, iter = 1e4, warmup = 2e3)
# Check sampling and plot posterior for threshold
traceplot(fit, inc_warmup = TRUE, nrow = 3)
pairs(fit, pars = c('m', 'w', 'lambda'), las = 1)
draws <- extract(fit)
print(fit)
HPDI(as.vector(draws$m), prob = 0.95)
dens(draws$m)
# Plot data and add model
pc <- aggregate(list(y = y), list(x = x), mean)
ns <- aggregate(list(y = y), list(x = x), length)
plot(pc$x, pc$y, xlim = c(-60, 10), ylim = c(0, 1.05), cex = ns$y*0.2, ylab = "P(correct)", xlab = "Level [dB]")
# Add lines to plot
lines(c(-70, 20), c(0.5, 0.5), lty = 2)  # Lower asymp
lines(c(-70, 20), c(1-chainmode(draws$lambda), 1-chainmode(draws$lambda)), lty = 2)  #Upper asymp
lines(c(-70, chainmode(draws$m)), c(0.75, 0.75), lty = 1, col = 'grey')  # Threshold
lines(c(chainmode(draws$m), chainmode(draws$m)), c(-0.1, 0.75), lty = 1, col = 'grey') # Threshold
lines(c(-70, 20), c(0.6 - chainmode(draws$lambda)/2, 0.6 - chainmode(draws$lambda)/2), lty = 2, col = 'red')
lines(c(-70, 20), c(0.9 - chainmode(draws$lambda)/2, 0.9 - chainmode(draws$lambda)/2), lty = 2, col = 'red')
xx <- seq(-70, 20, 1)
ypred <- 0.5 + (0.5 - mean(draws$lambda)) *
pnorm((qnorm(0.8)-qnorm(0.2)) * ((xx - mean(draws$m)) / mean(draws$w)))
lines(xx, ypred)
# get some data
g <- d[d$id == 107 & d$ilddef == 1 & d$rove == 0, ]
y <- as.integer(g$pc)
x <- g$ratio_bounded
N <- as.integer(length(y))
# Run stan
fit <- stan("psychometric_function_revised.stan", data = list(N = N, x = x, y = y),
chains = 1, iter = 1e4, warmup = 2e3)
# Check sampling and plot posterior for threshold
traceplot(fit, inc_warmup = TRUE, nrow = 3)
pairs(fit, pars = c('m', 'w', 'lambda'), las = 1)
draws <- extract(fit)
print(fit)
HPDI(as.vector(draws$m), prob = 0.95)
dens(draws$m)
# Plot data and add model
pc <- aggregate(list(y = y), list(x = x), mean)
ns <- aggregate(list(y = y), list(x = x), length)
plot(pc$x, pc$y, xlim = c(-60, 10), ylim = c(0, 1.05), cex = ns$y*0.2, ylab = "P(correct)", xlab = "Level [dB]")
# Add lines to plot
lines(c(-70, 20), c(0.5, 0.5), lty = 2)  # Lower asymp
lines(c(-70, 20), c(1-chainmode(draws$lambda), 1-chainmode(draws$lambda)), lty = 2)  #Upper asymp
lines(c(-70, chainmode(draws$m)), c(0.75, 0.75), lty = 1, col = 'grey')  # Threshold
lines(c(chainmode(draws$m), chainmode(draws$m)), c(-0.1, 0.75), lty = 1, col = 'grey') # Threshold
lines(c(-70, 20), c(0.6 - chainmode(draws$lambda)/2, 0.6 - chainmode(draws$lambda)/2), lty = 2, col = 'red')
lines(c(-70, 20), c(0.9 - chainmode(draws$lambda)/2, 0.9 - chainmode(draws$lambda)/2), lty = 2, col = 'red')
xx <- seq(-70, 20, 1)
ypred <- 0.5 + (0.5 - mean(draws$lambda)) *
pnorm((qnorm(0.8)-qnorm(0.2)) * ((xx - mean(draws$m)) / mean(draws$w)))
lines(xx, ypred)
expand.grid(id = c(107, 901), ilddef = c(0, 1), rove = c(0, 10))
rm(rovestan)
stan_th <- function(id, ilddef, rove, chains = 1, iter = 1e4, warmup = iter/2) {
g <- d[d$id == id & d$ilddef == ilddef & d$rove == rove, ]
y <- as.integer(g$pc)
x <- g$ratio_bounded
N <- as.integer(length(y))
model <- stan("psychometric_function_revised.stan", data = list(N = N, x = x, y = y),
chains = chains, iter = iter, warmup = warmup)
print(model)
draws <- extract(model)
th <- as.vector(draws$m)
thhdi <- HPDI(th, prob = 0.95)
lapse <- as.vector(draws$lambda)
out <- c(id = id, ilddef = ilddef, rove = rove, th = chainmode(th),
hdi95lo = thhdi[1], hdi95hi = thhdi[2] , lapse = chainmode(lapse))
out
}
cond <- expand.grid(id = c(107, 901), ilddef = c(0, 1), rove = c(0, 10))
rovestan <- data.frame(t(sapply(1:nrow(cond), function(i) {stan_th(cond[i,1], cond[i,2], cond[i,3])})))
rovestan <- rovestan[order(rovestan$id),]
rovestan
rovestan
round(rovestan)
remove.packages("alexis108")
library(alexis108)
library(alexis108)
devtools::install_github("stamnosslin/alexis108")
library(alexis108)
help("data108")
head(standata)
head(prepost_stan)
summary(prepost_stan)
round(summary(prepost_stan),3)
devtools::install_github("stamnosslin/alexis198")
devtools::install_github("stamnosslin/alexis108", build_vignettes = TRUE)
devtools::install_github("stamnosslin/alexis108", build_vignettes = TRUE, force = TRUE)
library(alexis108)
help("data108")
help("data108")
help(data108)
help("alexis108")
library(alexis108)
help(package = "alexis108")
devtools::load_all()
getwd()
setwd("./Desktop/alexis108/")
devtools::load_all()
help(package = "alexis108")
devtools::document()
devtools::install()
devtools::reload()
help(package = "alexis108")
devtools::reload(build.vignette = TRUE)
devtools::install(build.vignette = TRUE)
devtools::reload()
help(package = "alexis108")
